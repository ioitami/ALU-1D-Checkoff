/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_check_ans_2 (
    input [0:0] manualauto,
    input [15:0] ans,
    input [5:0] alufn,
    input [1:0] id,
    input [0:0] v,
    output reg [1:0] checkans,
    output reg [6:0] error
  );
  
  
  
  localparam ADD = 6'h00;
  
  localparam SUB = 6'h01;
  
  localparam MUL = 6'h02;
  
  localparam DIV = 6'h03;
  
  localparam SHL = 6'h20;
  
  localparam CMPEQ = 6'h33;
  
  localparam TESTCASE1 = 2'h0;
  
  localparam TEST1ADD = 16'h0036;
  
  localparam TEST1SUB = 16'h0000;
  
  localparam TEST1MUL = 16'h02d9;
  
  localparam TEST1DIV = 16'h0001;
  
  localparam TEST1SHL = 16'hd800;
  
  localparam TEST1EQ = 1'h1;
  
  localparam TESTCASE2 = 2'h1;
  
  localparam TEST2ADD = 17'h0c000;
  
  localparam TEST2SUB = 16'h3ffe;
  
  localparam TEST2MUL = 31'h20003fff;
  
  localparam TEST2DIV = 16'h0001;
  
  localparam TEST2SHL = 16'hfffe;
  
  localparam TEST2EQ = 1'h0;
  
  localparam TESTCASE3 = 2'h2;
  
  localparam TEST3ADD = 32'hffff0001;
  
  localparam TEST3SUB = 16'hffff;
  
  localparam TEST3MUL = 32'h3fff8000;
  
  localparam TEST3DIV = 16'h0001;
  
  localparam TEST3SHL = 16'h0000;
  
  localparam TEST3EQ = 1'h0;
  
  localparam CORRECT = 2'h3;
  
  localparam WRONG = 2'h1;
  
  localparam NIL = 2'h0;
  
  reg [1:0] z;
  
  reg [6:0] o;
  
  always @* begin
    z = 2'h0;
    o = 7'h7f;
    if (manualauto == 1'h1) begin
      z = 2'h0;
    end else begin
      if (id == 2'h0) begin
        if (alufn == 6'h00) begin
          if (ans == 16'h0036 && v == 1'h0) begin
            z = 2'h3;
          end else begin
            z = 2'h1;
          end
        end else begin
          if (alufn == 6'h01) begin
            if (ans == 16'h0000 && v == 1'h0) begin
              z = 2'h3;
            end else begin
              z = 2'h1;
            end
          end else begin
            if (alufn == 6'h02 && v == 1'h0) begin
              if (ans == 16'h02d9) begin
                z = 2'h3;
              end else begin
                z = 2'h1;
              end
            end else begin
              if (alufn == 6'h03 && v == 1'h0) begin
                if (ans == 16'h0001) begin
                  z = 2'h3;
                end else begin
                  z = 2'h1;
                end
              end else begin
                if (alufn == 6'h33) begin
                  if (ans == 1'h1 && v == 1'h0) begin
                    z = 2'h3;
                  end else begin
                    z = 2'h1;
                  end
                end else begin
                  if (alufn == 6'h20) begin
                    if (ans == 16'hd800) begin
                      z = 2'h3;
                    end else begin
                      z = 2'h1;
                    end
                  end
                end
              end
            end
          end
        end
      end
      if (id == 2'h1) begin
        if (alufn == 6'h00) begin
          if (ans == 17'h0c000 && v == 1'h0) begin
            z = 2'h3;
          end else begin
            z = 2'h1;
          end
        end else begin
          if (alufn == 6'h01) begin
            if (ans == 16'h3ffe && v == 1'h0) begin
              z = 2'h3;
            end else begin
              z = 2'h1;
            end
          end else begin
            if (alufn == 6'h02 && v == 1'h0) begin
              if (ans == 31'h20003fff) begin
                z = 2'h3;
              end else begin
                z = 2'h1;
              end
            end else begin
              if (alufn == 6'h03 && v == 1'h0) begin
                if (ans == 16'h0001) begin
                  z = 2'h3;
                end else begin
                  z = 2'h1;
                end
              end else begin
                if (alufn == 6'h33) begin
                  if (ans == 1'h0 && v == 1'h0) begin
                    z = 2'h3;
                  end else begin
                    z = 2'h1;
                  end
                end else begin
                  if (alufn == 6'h20) begin
                    if (ans == 16'hfffe) begin
                      z = 2'h3;
                    end else begin
                      z = 2'h1;
                    end
                  end
                end
              end
            end
          end
        end
      end
      if (id == 2'h2) begin
        if (alufn == 6'h00) begin
          if (ans == 32'hffff0001 && v == 1'h0) begin
            z = 2'h3;
          end else begin
            z = 2'h1;
          end
        end else begin
          if (alufn == 6'h01) begin
            if (ans == 16'hffff && v == 1'h0) begin
              z = 2'h3;
            end else begin
              z = 2'h1;
            end
          end else begin
            if (alufn == 6'h02 && v == 1'h0) begin
              if (ans == 32'h3fff8000) begin
                z = 2'h3;
              end else begin
                z = 2'h1;
              end
            end else begin
              if (alufn == 6'h03 && v == 1'h0) begin
                if (ans == 16'h0001) begin
                  z = 2'h3;
                end else begin
                  z = 2'h1;
                end
              end else begin
                if (alufn == 6'h33) begin
                  if (ans == 1'h0 && v == 1'h0) begin
                    z = 2'h3;
                  end else begin
                    z = 2'h1;
                  end
                end else begin
                  if (alufn == 6'h20) begin
                    if (ans == 16'h0000) begin
                      z = 2'h3;
                    end else begin
                      z = 2'h1;
                    end
                  end
                end
              end
            end
          end
        end
      end
      if (alufn != 6'h00 && alufn != 6'h01 && alufn != 6'h02 && alufn != 6'h33 && alufn != 6'h20 && alufn != 6'h03) begin
        z = 2'h0;
      end
      o = 7'h7f;
      if (v == 1'h1 && ans[15+0-:1] == 1'h0) begin
        o = 7'h48;
      end
      if (v == 1'h1 && ans[15+0-:1] == 1'h1) begin
        o = 7'h0c;
      end
      if (z == 2'h0) begin
        o = 7'h06;
      end
    end
    checkans = z;
    error = o;
  end
endmodule

/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_tester_1 (
    input clk,
    input rst,
    input [5:0] alufn,
    input [0:0] buttons,
    output reg [15:0] out,
    output reg [2:0] zvn,
    output reg [1:0] testcase
  );
  
  
  
  wire [16-1:0] M_alutest_out;
  wire [3-1:0] M_alutest_zvn;
  reg [16-1:0] M_alutest_a;
  reg [16-1:0] M_alutest_b;
  reg [6-1:0] M_alutest_alufn_signal;
  alu_8 alutest (
    .a(M_alutest_a),
    .b(M_alutest_b),
    .alufn_signal(M_alutest_alufn_signal),
    .out(M_alutest_out),
    .zvn(M_alutest_zvn)
  );
  
  
  localparam S0_controller = 2'd0;
  localparam S1_controller = 2'd1;
  localparam S2_controller = 2'd2;
  
  reg [1:0] M_controller_d, M_controller_q = S0_controller;
  
  localparam TESTCASE1 = 2'h0;
  
  localparam TEST1A = 16'h001b;
  
  localparam TEST1B = 16'h001b;
  
  localparam TESTCASE2 = 2'h1;
  
  localparam TEST2A = 16'h7fff;
  
  localparam TEST2B = 16'h4001;
  
  localparam TESTCASE3 = 2'h2;
  
  localparam TEST3A = 16'h8000;
  
  localparam TEST3B = 16'h8001;
  
  reg [1:0] z;
  
  always @* begin
    M_controller_d = M_controller_q;
    
    M_alutest_a = 16'h0000;
    M_alutest_b = 16'h0000;
    M_alutest_alufn_signal = alufn;
    z = 2'h0;
    
    case (M_controller_q)
      S0_controller: begin
        M_alutest_a = 16'h001b;
        M_alutest_b = 16'h001b;
        M_alutest_alufn_signal = alufn;
        z = 2'h0;
        if (buttons == 1'h1) begin
          M_controller_d = S1_controller;
        end
      end
      S1_controller: begin
        M_alutest_a = 16'h7fff;
        M_alutest_b = 16'h4001;
        M_alutest_alufn_signal = alufn;
        z = 2'h1;
        if (buttons == 1'h1) begin
          M_controller_d = S2_controller;
        end
      end
      S2_controller: begin
        M_alutest_a = 16'h8000;
        M_alutest_b = 16'h8001;
        M_alutest_alufn_signal = alufn;
        z = 2'h2;
        if (buttons == 1'h1) begin
          M_controller_d = S0_controller;
        end
      end
    endcase
    testcase = z;
    out = M_alutest_out;
    zvn = M_alutest_zvn;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_controller_q <= 1'h0;
    end else begin
      M_controller_q <= M_controller_d;
    end
  end
  
endmodule

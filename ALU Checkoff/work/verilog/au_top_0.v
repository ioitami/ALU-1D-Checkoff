/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_alutest_out;
  wire [3-1:0] M_alutest_zvn;
  wire [2-1:0] M_alutest_testcase;
  reg [8-1:0] M_alutest_a;
  reg [8-1:0] M_alutest_b;
  reg [1-1:0] M_alutest_manualauto;
  reg [6-1:0] M_alutest_alufn;
  reg [1-1:0] M_alutest_buttons;
  alu_tester_1 alutest (
    .clk(clk),
    .rst(rst),
    .a(M_alutest_a),
    .b(M_alutest_b),
    .manualauto(M_alutest_manualauto),
    .alufn(M_alutest_alufn),
    .buttons(M_alutest_buttons),
    .out(M_alutest_out),
    .zvn(M_alutest_zvn),
    .testcase(M_alutest_testcase)
  );
  
  wire [2-1:0] M_checkans_checkans;
  wire [7-1:0] M_checkans_error;
  reg [1-1:0] M_checkans_manualauto;
  reg [16-1:0] M_checkans_ans;
  reg [6-1:0] M_checkans_alufn;
  reg [2-1:0] M_checkans_id;
  reg [1-1:0] M_checkans_v;
  alu_check_ans_2 checkans (
    .manualauto(M_checkans_manualauto),
    .ans(M_checkans_ans),
    .alufn(M_checkans_alufn),
    .id(M_checkans_id),
    .v(M_checkans_v),
    .checkans(M_checkans_checkans),
    .error(M_checkans_error)
  );
  
  wire [16-1:0] M_err_out;
  reg [1-1:0] M_err_yesno;
  reg [16-1:0] M_err_in;
  alu_errorcase_3 err (
    .yesno(M_err_yesno),
    .in(M_err_in),
    .out(M_err_out)
  );
  
  wire [(1'h1+0)-1:0] M_buttoncond_out;
  reg [(1'h1+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<1'h1;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_4 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'he;
    M_buttoncond_in = io_button[0+0-:1];
    M_alutest_buttons = M_buttoncond_out;
    M_alutest_alufn = io_dip[0+0+5-:6];
    M_alutest_a = io_dip[16+0+7-:8];
    M_alutest_b = io_dip[8+0+7-:8];
    M_alutest_manualauto = io_dip[0+6+0-:1];
    M_checkans_manualauto = io_dip[0+6+0-:1];
    M_err_yesno = io_dip[0+7+0-:1];
    M_err_in = M_alutest_out;
    io_led[8+7-:8] = M_err_out[0+7-:8];
    io_led[16+7-:8] = M_err_out[8+7-:8];
    M_checkans_id = M_alutest_testcase;
    M_checkans_alufn = io_dip[0+0+5-:6];
    M_checkans_v = M_alutest_zvn[1+0-:1];
    M_checkans_ans = M_err_out;
    io_led[0+0+1-:2] = M_checkans_checkans;
    io_seg = M_checkans_error;
  end
endmodule

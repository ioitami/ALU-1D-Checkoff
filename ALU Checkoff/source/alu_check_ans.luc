module alu_check_ans (
    
    input manualauto[1],
    
    input ans[16],
    input alufn[6],
    input id[2],
    input v[1], //Overflow input
    output checkans[2],
    output error[7]
  ) {
  
  const ADD = b000000;
  const SUB = b000001;
  const MUL = b000010;
  const DIV = b000011;
  const SHL = b100000;
  const CMPEQ = b110011;
  //HARD CODED ANSWER KEYS
  //==================================
  //TEST 1 ANS (S0)
  const TESTCASE1 = 2b00;
  const TEST1ADD = b0000000000110110; //54
  const TEST1SUB = b0000000000000000; //0
  const TEST1MUL = b0000001011011001; //729
  const TEST1DIV = b0000000000000001; //1.00
  const TEST1SHL = b1101100000000000; //SHL 10 bits 
  const TEST1EQ =  1;
  //TEST 2 ANS (S1)
  const TESTCASE2 = 2b01;
  const TEST2ADD = b01100000000000000; //49152
  const TEST2SUB = b0011111111111110; //16382
  const TEST2MUL = b0100000000000000011111111111111; //536887295
  const TEST2DIV = b0000000000000001; //1.99 (takes only int 1)
  const TEST2SHL = b1111111111111110; //SHL 1 bit
  const TEST2EQ =  0;
  //TEST3 ANS (S2)
  const TESTCASE3 = 2b10;
  const TEST3ADD = b11111111111111110000000000000001; //-65535
  const TEST3SUB = b1111111111111111; //-1
  const TEST3MUL = b00111111111111111000000000000000; //1073709056
  const TEST3DIV = b0000000000000001; //1.00003 (takes only int 1)
  const TEST3SHL = b0000000000000000; //SHL 1 bit
  const TEST3EQ =  0;
  //OUTPUTS
  const CORRECT = b11;
  const WRONG = b01;
  const NIL = b10;
  //==================================
  sig z[2];
  sig o[7];
  
  always {
  
    //Default value
    z= 2b00;
    o= 7b1111111;
    
    if(manualauto == 1b1){ //Display nothing if using manual inputs
      if(alufn != ADD && 
       alufn != SUB && 
       alufn != MUL &&
       alufn != DIV &&
       alufn != 6b011000 && //(AND)
       alufn != 6b011110 && //(OR)
       alufn != 6b010110 && //(XOR)
       alufn != 6b011010 && //(LDR)
       alufn != SHL &&
       alufn != 6b100001 && //(SHR)
       alufn != 6b100011 && //(SRA)
       alufn != CMPEQ &&
       alufn != b110101 && //(CMPLT)
       alufn != b110111 //(CMPLE)
       ){
      z = NIL; 
      }
      else{
      z = 2b00;
      }   
    }
      
    else{ //Use Test cases if auto input
    
    //TEST CASE NO.1
    //========================
    if(id == TESTCASE1){
    
      if(alufn == ADD){ //Check if ALUFN is adding
        if(ans == TEST1ADD && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SUB){ //Check if ALUFN is subtracting
        if(ans == TEST1SUB && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == MUL && v == 1b0){ //Check if ALUFN is multiplying
        if(ans == TEST1MUL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == DIV && v == 1b0){ //Check if ALUFN is divising
        if(ans == TEST1DIV){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == CMPEQ){ //Check if ALUFN is comparing equal
        if(ans == TEST1EQ && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SHL){ //Check if ALUFN is shift left
        if(ans == TEST1SHL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
    }
    //========================
    
    //TEST CASE NO.2
    //========================
    if(id == TESTCASE2){
    
      if(alufn == ADD){ //Check if ALUFN is adding
        if(ans == TEST2ADD && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SUB){ //Check if ALUFN is subtracting
        if(ans == TEST2SUB && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == MUL && v == 1b0){ //Check if ALUFN is multiplying
        if(ans == TEST2MUL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == DIV && v == 1b0){ //Check if ALUFN is divising
        if(ans == TEST2DIV){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == CMPEQ){ //Check if ALUFN is comparing equal
        if(ans == TEST2EQ && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SHL){ //Check if ALUFN is shift left
        if(ans == TEST2SHL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
    }
    //========================
    
    //TEST CASE NO.3
    //========================
    if(id == TESTCASE3){
    
      if(alufn == ADD){ //Check if ALUFN is adding
        if(ans == TEST3ADD && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SUB){ //Check if ALUFN is subtracting
        if(ans == TEST3SUB && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == MUL && v == 1b0){ //Check if ALUFN is multiplying
        if(ans == TEST3MUL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == DIV && v == 1b0){ //Check if ALUFN is divising
        if(ans == TEST3DIV){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == CMPEQ){ //Check if ALUFN is comparing equal
        if(ans == TEST3EQ && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SHL){ //Check if ALUFN is shift left
        if(ans == TEST3SHL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
    }
   
    //========================
    // Doesn't display anything if answer sheet doesn't support the alufn (not hardcoded)
    if(alufn != ADD && alufn != SUB && alufn != MUL && alufn != CMPEQ && alufn != SHL && alufn != DIV){
      z = NIL;
      }
    }
      
      
    //OVERFLOW CHECKER
    //DEFAULT VALUE
    o = 7b1111111;  
    
    if(z == NIL){
      o = 7b0000110;
      } 
    else if(v == 1b1 && ans[15] == 0){ //Negative Overflow (Display N)
      o = 7b1001000;
      }
    else if(v == 1b1 && ans[15] == 1){ //Positive Overflow (Display P)
      o = 7b0001100;
      }
    
    //OUTPUT ANSWER (11 if correct, 01 if wrong) / OUTPUT OVERFLOW (P or N)
    checkans = z;
    error = o;
  }
}

module alu_check_ans (

    input ans[16],
    input alufn[6],
    input id[2],
    input v[1], //Overflow input
    output checkans[2],
    output error[7]
  ) {
  
  const ADD = b000000;
  const SUB = b000001;
  const MUL = b000010;
  //const AND = b011000;
  const CMPEQ = b110011;
  //HARD CODED ANSWER KEYS
  //==================================
  //TEST 1 ANS (S0)
  const TESTCASE1 = 2b00;
  const TEST1ADD = b0000000000110110; //54
  const TEST1SUB = b0000000000000000; //0
  const TEST1MUL = b0000001011011001; //729
  const TEST1EQ =  1;
  //TEST 2 ANS (S1)
  const TESTCASE2 = 2b01;
  const TEST2ADD = b01100000000000000; //49152
  const TEST2SUB = b0011111111111110; //16382
  const TEST2MUL = b0100000000000000011111111111111; //536887295
  const TEST2EQ =  0;
  //TEST3 ANS (S2)
  const TESTCASE3 = 2b10;
  const TEST3ADD = b11111111111111110000000000000001; //-65535
  const TEST3SUB = b1111111111111111; //-1
  const TEST3MUL = b00111111111111111000000000000000; //1073709056
  const TEST3EQ =  0;
  //OUTPUTS
  const CORRECT = b11;
  const WRONG = b01;
  const NIL = b00;
  //==================================
  sig z[2];
  sig o[7];
  
  always {
    //TEST CASE NO.1
    //========================
    if(id == TESTCASE1){
    
      if(alufn == ADD){ //Check if ALUFN is adding
        if(ans == TEST1ADD && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SUB){ //Check if ALUFN is subtracting
        if(ans == TEST1SUB && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == MUL && v == 1b0){ //Check if ALUFN is multiplying
        if(ans == TEST1MUL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == CMPEQ){ //Check if ALUFN is comparing equal
        if(ans == TEST1EQ && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
    }
    //========================
    
    //TEST CASE NO.2
    //========================
    if(id == TESTCASE2){
    
      if(alufn == ADD){ //Check if ALUFN is adding
        if(ans == TEST2ADD && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SUB){ //Check if ALUFN is subtracting
        if(ans == TEST2SUB && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == MUL && v == 1b0){ //Check if ALUFN is multiplying
        if(ans == TEST2MUL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == CMPEQ){ //Check if ALUFN is comparing equal
        if(ans == TEST2EQ && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
    }
    //========================
    
    //TEST CASE NO.3
    //========================
    if(id == TESTCASE3){
    
      if(alufn == ADD){ //Check if ALUFN is adding
        if(ans == TEST3ADD && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == SUB){ //Check if ALUFN is subtracting
        if(ans == TEST3SUB && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == MUL && v == 1b0){ //Check if ALUFN is multiplying
        if(ans == TEST3MUL){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
      else if(alufn == CMPEQ){ //Check if ALUFN is comparing equal
        if(ans == TEST3EQ && v == 1b0){ //Check if ans is same as ans key & no overflow
          z = CORRECT;
        }
        else{z = WRONG;}
      }
    }
    //========================
    
    if(alufn != ADD && alufn != SUB && alufn != MUL && alufn != CMPEQ){
      z = NIL;
    }
    
    //OVERFLOW CHECKER
    //DEFAULT VALUE
    o = 7b1111111;   
    if(v == 1b1 && ans[15] == 0){ //Negative Overflow (Display N)
      o = 7b1001000;
    }
    if(v == 1b1 && ans[15] == 1){ //Positive Overflow (Display P)
      o = 7b0001100;
    }
    if(z == NIL){
      o = 7b0000110;
    }
    //OUTPUT ANSWER (11 if correct, 01 if wrong) / OUTPUT OVERFLOW (P or N)
    checkans = z;
    error = o;
  }
}

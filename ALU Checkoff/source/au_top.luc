module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  alu_tester alutest(.clk(clk), .rst(rst));
  alu_check_ans checkans;
  alu_errorcase err;

  button_conditioner buttoncond[1](.clk(clk)); //button for auto
  
  edge_detector buttondetector[1](#RISE(1), #FALL(0),.clk(clk));
  button_conditioner buttoncond_manual[1](.clk(clk)); //button for manual
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = ~4h1;           // select 1 digit
    
    //ALU IMPLEMENTATIONS
    //-------------------------------------------
    //Hold Button to move through test cases
    buttoncond.in = io_button[0];
    
    //BUTTON input into the alu to swap between states
    alutest.buttons = buttoncond.out;
    
    //MANUAL INPUTS
    buttoncond_manual.in = io_button[2];
    buttondetector.in = buttoncond_manual.out;
    alutest.button_state = buttondetector.out; //Switch between manual states
    
    alutest.manualswitch = io_dip[0][6]; //Switch to Manual/Auto
    
    alutest.alufn = io_dip[0][5:0]; //Take alufn from 6 bit input io_dip[0][5:0]
    
    alutest.a[7:0] = io_dip[1][7:0]; //Take input a from io_dips
    alutest.a[15:8] = io_dip[2][7:0];
        
    alutest.b[7:0] = io_dip[1][7:0]; //Take input b from io_dips
    alutest.b[15:8] = io_dip[2][7:0];
    
    checkans.manualauto = io_dip[0][6]; //Select manual input or testcase implementation
    
    //SIMULATE ERROR CASE: use io_dip[0][7] to add 1 bit to alu output
    err.yesno = io_dip[0][7];
    err.in = alutest.out;
    
    //OUTPUT: RESULT output onto 16 io_leds to signify 16 bits (plus 3 bit zvn)
    io_led[1] = err.out[7:0];
    io_led[2] = err.out[15:8];
    io_led[0][7:5] = alutest.zvn;
    
    //OUTPUT: CHECK answer with alu_check_ans (right: 11, wrong:01)
    checkans.id = alutest.testcase; //Take test case no. from alu_tester
    checkans.alufn = io_dip[0][5:0]; //Take alufn from 6 bit input io_dip[0][5:0]
    checkans.v = alutest.zvn[1]; //Take overflow value v from alu_tester
    checkans.ans = err.out[15:0]; //Take result from alu_errorcase
    
    io_led[0][1:0] = checkans.checkans; //Right or wrong displayed here
    io_seg = checkans.error; //Display overflow type here
    //-------------------------------------------
  }
}